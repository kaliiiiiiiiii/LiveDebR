name: Build

on:
  push:
    tags:
      - 'release'

jobs:
  build:
    permissions:
      contents: write
    runs-on: ubuntu-latest

    container:
      image: debian:latest
      options: --privileged

    steps:
    - uses: actions/checkout@v3

    - name: verify release
      id: verify-release
      run: |
        apt-get update -y
        apt-get install -y curl jq

        TAG="${{ github.ref_name }}"
        RELEASE_NAME=$(curl -s \
        -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG" | jq -r '.name')

        if [[ ! "$RELEASE_NAME" =~ ^v ]]; then
          echo "Error: RELEASE_NAME does not start with 'v'."
          exit 1
        fi
        if [[ "$TAG" != "release" ]]; then
          echo "Error: RELEASE_TAG hast to equal 'release'."
          exit 1
        fi
        echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_OUTPUT

    - name: Integrate cache
      uses: actions/cache@v4
      with:
        path: |
          /var/cache/apt
          out/live/cache
        key: debian-apt-3

    - name: Install deps
      run: |
        echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/01keep-debs
        apt-get install -y make procps wget python3
        wget https://mega.nz/linux/repo/Debian_12/amd64/megacmd-Debian_12_amd64.deb
        apt-get install -y "$PWD/megacmd-Debian_12_amd64.deb"
        make deps

    - name: Build builder
      run: |
        . "$HOME/.cargo/env"  # add freshly installed cargo to $path
        make builder
        
    - name: Prepare release.md
      id: read_release
      shell: bash
      run: |
        mkdir gh_release
        mv out/builder.tar.gz gh_release/builder_linux_amd64_deb.tar.gz
        cp out/builder/assets/keyringer/keyringer gh_release/keyringer
        python3 -c "import os, uuid; final_content=open('release.md').read().replace('{tag}', '${{ github.event.release.name }}')+'\n'+open('debr_usage.md').read(); open('release.md', 'w').write(final_content); delim=str(uuid.uuid1()); fh=open(os.environ['GITHUB_OUTPUT'], 'a'); print(f'RELEASE_BODY<<{delim}', file=fh); print(final_content, file=fh); print(delim, file=fh); fh.close()"
    - name: Upload builder
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: gh_release/*
        tag: ${{ github.ref_name }}
        overwrite: true
        prerelease: true
        make_latest: false
        file_glob: true
        body: ${{ steps.read_release.outputs.RELEASE_BODY }}
      
    - name: Build iso
      run: |
        make build
    
    - name: Mega upload
      run: |
          CMD_DIR="/github/home/.megaCmd"
          LOG_FILE="$CMD_DIR/megacmdserver.log"
          ISO="live-image-amd64-${{ steps.verify-release.outputs.RELEASE_NAME }}.hybrid.iso.gz"
          DIR="/liveDebR"

          mkdir release && gzip -c out/live/live-image-amd64.hybrid.iso > "release/$ISO"
          mkdir -p "$CMD_DIR" && touch "$LOG_FILE" && nohup tail -f "$LOG_FILE" &
          mega-login "${{ secrets.MEGA_USERNAME }}" "${{ secrets.MEGA_PASSWORD }}"
          mega-put -c "release/$ISO" "$DIR/"

          mega-export -a -f "$DIR/$ISO" > mega_url.txt
          grep -o 'https://mega.nz/file/[^"]*' mega_url.txt > url.txt
          rm mega_url.txt
    
    - name: Post-config tags
      run: |
        python3 -c "
        
        import os, urllib.request, json, time
        from datetime import datetime

        MEGA_URL=open('url.txt').read().strip(); 
        RELEASE_BODY=open('release.md').read().replace('{MEGAURL}', MEGA_URL)

        def make_request(url, method='GET', data=None, headers=None):
            req = urllib.request.Request(url, data=data, headers=headers, method=method)
            try:
                with urllib.request.urlopen(req) as response:
                    if response.status == 204:  # No Content
                        return None
                    return json.loads(response.read().decode())
            except urllib.error.HTTPError as e:
                error_message = e.read().decode()
                raise Exception(f'Error: {e.code} - {e.reason}\nError message: {error_message}')

        TAG = '${{ github.ref_name }}'
        RENAME = '${{ steps.verify-release.outputs.RELEASE_NAME }}'
        repo = '${{ github.repository }}'
        headers = {'Authorization': f'token ${{ secrets.GITHUB_TOKEN }}'}

        # get release data
        release_data = make_request(f'https://api.github.com/repos/{repo}/releases/tags/{TAG}', headers=headers)
        RELEASE_ID = release_data['id']
        BRANCH = release_data['target_commitish']
        branch_data = make_request(f'https://api.github.com/repos/{repo}/git/refs/heads/{BRANCH}', headers=headers)
        COMMIT_SHA = branch_data['object']['sha']
        
        # delete tag
        make_request(f'https://api.github.com/repos/{repo}/git/refs/tags/{TAG}', method='DELETE', headers=headers)
        
        # Associate the release with new tag
        update_data = json.dumps({'tag_name': RENAME, 'name': RENAME, 'body': RELEASE_BODY, 'draft': False, 'prerelease': False, 'latest': True}).encode()
        make_request(f'https://api.github.com/repos/{repo}/releases/{RELEASE_ID}', method='PATCH', data=update_data, headers=headers)
        "
    - name: Delete "release" tag
      if: failure()
      run: |
        curl -X DELETE \
        -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        "https://api.github.com/repos/${{ github.repository }}/git/refs/tags/${{ github.ref_name }}"
        