name: Build

on:
  push:
    tags:
      - 'release'

jobs:
  build:
    permissions:
      contents: write
    runs-on: ubuntu-latest

    container:
      image: debian:latest
      options: --privileged

    steps:
    - uses: actions/checkout@v3

    - name: verify release
      id: verify-release
      run: |
        apt-get update -y
        apt-get install -y curl

        TAG="${{ github.ref_name }}"
        RELEASE_NAME=$(curl -s \
        -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG" | jq -r '.name')

        if [[ ! "$RELEASE_NAME" =~ ^v ]]; then
          echo "Error: RELEASE_NAME does not start with 'v'."
          exit 1
        fi
        if [[ "$TAG" != "release" ]]; then
          echo "Error: RELEASE_TAG hast to equal 'release'."
          exit 1
        fi
        echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_OUTPUT

    - name: Integrate cache
      uses: actions/cache@v4
      with:
        path: |
          /var/cache/apt
          out/live/cache
        key: debian-apt-3

    - name: Install deps
      run: |
        echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/01keep-debs
        apt-get install -y make procps wget python3
        wget https://mega.nz/linux/repo/Debian_12/amd64/megacmd-Debian_12_amd64.deb
        apt-get install -y "$PWD/megacmd-Debian_12_amd64.deb"
        make deps

    - name: Build builder
      run: |
        . "$HOME/.cargo/env"  # add freshly installed cargo to $path
        make builder
        
    - name: Prepare release.md
      id: read_release
      shell: bash
      run: |
        python3 -c "import os, uuid; final_content=open('release.md').read().replace('{tag}', '${{ github.event.release.name }}')+'\n'+open('debr_usage.md').read(); open('release.md', 'w').write(final_content); delim=str(uuid.uuid1()); fh=open(os.environ['GITHUB_OUTPUT'], 'a'); print(f'RELEASE_BODY<<{delim}', file=fh); print(final_content, file=fh); print(delim, file=fh); fh.close()"
    - name: Upload builder
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: out/builder.tar.gz
        asset_name: builder_linux_amd64_deb.tar.gz 
        tag: ${{ github.ref_name }}
        overwrite: true
        prerelease: false
        make_latest: true
        body: ${{ steps.read_release.outputs.RELEASE_BODY }}
      
    - name: Build iso
      run: |
        make build
    
    - name: Mega upload
      id: mega_upload
      run: |
          CMD_DIR="/github/home/.megaCmd"
          LOG_FILE="$CMD_DIR/megacmdserver.log"
          ISO="live-image-amd64-${{ github.ref_name }}.hybrid.iso.gz"
          DIR="/liveDebR"

          mkdir release && gzip -c out/live/live-image-amd64.hybrid.iso > "release/$ISO"
          mkdir -p "$CMD_DIR" && touch "$LOG_FILE" && nohup tail -f "$LOG_FILE" &
          mega-login "$USERNAME" "$PASSWORD"
          mega-put -c "release/$ISO" "$DIR/"
          mega-export -a -f "$DIR/$ISO" > mega_url.txt
          grep -o 'https://mega.nz/file/[^"]*' mega_url.txt > url.txt

          # put mega url into release.md
          python3 -c "import os, uuid; url=open('url.txt').read().strip(); release=open('release.md').read().replace('{MEGAURL}', url); open('release.md', 'w').write(release); delim=str(uuid.uuid1()); fh=open(os.environ['GITHUB_OUTPUT'], 'a'); print(f'RELEASE_BODY<<{delim}', file=fh); print(release, file=fh); print(delim, file=fh); fh.close()"
      env:
          USERNAME: ${{ secrets.MEGA_USERNAME }}
          PASSWORD: ${{ secrets.MEGA_PASSWORD }}
    
    - name: Upload keyringer & update release body
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: out/builder/assets/keyringer
        asset_name: keyringer
        tag: ${{ github.ref_name }}
        overwrite: true
        make_latest: true
        body: ${{ steps.mega_upload.outputs.RELEASE_BODY }}
    
    - name: Post-config tags
      run: |
        python3 -c "
        import os, urllib.request, json
        from datetime import datetime

        def make_request(url, method='GET', data=None, headers=None):
            req = urllib.request.Request(url, data=data, headers=headers, method=method)
            try:
                with urllib.request.urlopen(req) as response:
                    if response.status == 204:  # No Content
                        return None
                    return json.loads(response.read().decode())
            except urllib.error.HTTPError as e:
                error_message = e.read().decode()
                print(f'Error: {e.code} - {e.reason}')
                print(f'Error message: {error_message}')
                exit(1)

        TAG = '${{ github.ref_name }}'
        GITHUB_TOKEN = '${{ secrets.GITHUB_TOKEN }}'
        repo = '${{ github.repository }}'
        release_url = f'https://api.github.com/repos/{repo}/releases/tags/{TAG}'
        headers = {'Authorization': f'token {GITHUB_TOKEN}'}

        # Get release data
        release_data = make_request(release_url, headers=headers)
        RELEASE_ID = release_data['id']
        ORIGINAL_BODY = release_data.get('body', '')
        BRANCH = release_data['target_commitish']

        branch_url = f'https://api.github.com/repos/{repo}/git/refs/heads/{BRANCH}'
        branch_data = make_request(branch_url, headers=headers)
        COMMIT_SHA = branch_data['object']['sha']

        delete_url = f'https://api.github.com/repos/{repo}/git/refs/tags/{TAG}'
        make_request(delete_url, method='DELETE', headers=headers)

        # Create tag via API
        create_ref_url = f'https://api.github.com/repos/{repo}/git/refs'
        tag_ref_data = json.dumps({
            'ref': f'refs/tags/{TAG}',
            'sha': COMMIT_SHA,
            'message': 'creating a tag',
        }).encode()

        ref_response = make_request(create_ref_url, method='POST', data=tag_ref_data, headers=headers)

        # Re-associate the release with the new tag
        update_url = f'https://api.github.com/repos/{repo}/releases/{RELEASE_ID}'
        update_data = json.dumps({'tag_name': TAG, 'name': TAG, 'body': ORIGINAL_BODY, 'draft': False, 'prerelease': False, 'latest': True}).encode()
        make_request(update_url, method='PATCH', data=update_data, headers=headers)
        "